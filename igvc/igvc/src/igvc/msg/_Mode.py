"""autogenerated by genpy from igvc/Mode.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Mode(genpy.Message):
  _md5sum = "400d49a9c3317d8c331c686aee8809d3"
  _type = "igvc/Mode"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """byte UNKNOWN=0
byte LANE=1
byte START_GPS_CW=2
byte START_GPS_CCW=3
byte GPS_CW_1=4
byte GPS_CW_2=5
byte GPS_CCW_1=6
byte GPS_CCW_2=7
byte FENCE_CW=8
byte FENCE_CCW=9
byte END_GPS_CW=10
byte END_GPS_CCW=11
byte ALIGN_LANE=12
byte GATE_CW=13
byte GATE_CCW=14
"""
  # Pseudo-constants
  UNKNOWN = 0
  LANE = 1
  START_GPS_CW = 2
  START_GPS_CCW = 3
  GPS_CW_1 = 4
  GPS_CW_2 = 5
  GPS_CCW_1 = 6
  GPS_CCW_2 = 7
  FENCE_CW = 8
  FENCE_CCW = 9
  END_GPS_CW = 10
  END_GPS_CCW = 11
  ALIGN_LANE = 12
  GATE_CW = 13
  GATE_CCW = 14

  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Mode, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
