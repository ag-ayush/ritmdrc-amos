#include <ros/ros.h>
#include <geodesy/utm.h>
#include <geodesy/wgs84.h>
#include <sensor_msgs/NavSatFix.h>
#include <geographic_msgs/GeoPoint.h>
#include <tf/transform_broadcaster.h>
#include <tf/transform_listener.h>

ros::Publisher utmPub;
tf::TransformListener tfs;

void gpsCallback(const sensor_msgs::NavSatFix &msg)
{
    geodesy::UTMPoint utmpoint;
    convert(geodesy::toMsg(msg), utmpoint);
    geometry_msgs::Point utm = geodesy::toGeometry(utmpoint);

    utmPub.publish(utm);

    // publish our frame data
    static tf::TransformBroadcaster br; 
    tf::Transform transform;
    transform.setOrigin( tf::Vector3(position.pose.pose.position.x, position.pose.pose.position.y, 0.0) );
    transform.setRotation( tf::createQuaternionFromRPY(0, 0, position.pose.pose.orientation.z) );
    br.sendTransform(tf::StampedTransform(transform, ros::Time::now(), "amos_localize", "amos"));
}

int main(int argc, char **argv)
{
    ros::init(argc, argv, "gps_convert");

    ros::NodeHandle n;

    utmPub = n.advertise<geometry_msgs::Point>("gps_utm", 1);
    ros::Subscriber gpsSub = n.subscribe("gps", 1, gpsCallback);

    tfs = tf::TransformListener(ros::rate(10));

    // publish 0,0 map offset
    static tf::TransformBroadcaster br; 
    tf::Transform transform;
    transform.setOrigin( tf::Vector3(0, 0, 0.0) );
    transform.setRotation( tf::createQuaternionFromRPY(0, 0, 0) );
    br.sendTransform(tf::StampedTransform(transform, ros::Time::now(), "world", "map"));

    ros::spin();
}

