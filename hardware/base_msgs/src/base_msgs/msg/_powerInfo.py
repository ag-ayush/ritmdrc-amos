"""autogenerated by genpy from base_msgs/powerInfo.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class powerInfo(genpy.Message):
  _md5sum = "b4c72da9ae23f39c0571bf2017b17268"
  _type = "base_msgs/powerInfo"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 voltageLeft
float32 voltageRight
float32 currentLeft
float32 currentRight


"""
  __slots__ = ['voltageLeft','voltageRight','currentLeft','currentRight']
  _slot_types = ['float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       voltageLeft,voltageRight,currentLeft,currentRight

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(powerInfo, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.voltageLeft is None:
        self.voltageLeft = 0.
      if self.voltageRight is None:
        self.voltageRight = 0.
      if self.currentLeft is None:
        self.currentLeft = 0.
      if self.currentRight is None:
        self.currentRight = 0.
    else:
      self.voltageLeft = 0.
      self.voltageRight = 0.
      self.currentLeft = 0.
      self.currentRight = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_4f.pack(_x.voltageLeft, _x.voltageRight, _x.currentLeft, _x.currentRight))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.voltageLeft, _x.voltageRight, _x.currentLeft, _x.currentRight,) = _struct_4f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_4f.pack(_x.voltageLeft, _x.voltageRight, _x.currentLeft, _x.currentRight))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.voltageLeft, _x.voltageRight, _x.currentLeft, _x.currentRight,) = _struct_4f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4f = struct.Struct("<4f")
