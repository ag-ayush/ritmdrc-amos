/* Auto-generated by genmsg_cpp for file /home/amos/amosRos/hardware/imu_msg/msg/Orientation.msg */
#ifndef IMU_MSG_MESSAGE_ORIENTATION_H
#define IMU_MSG_MESSAGE_ORIENTATION_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace imu_msg
{
template <class ContainerAllocator>
struct Orientation_ {
  typedef Orientation_<ContainerAllocator> Type;

  Orientation_()
  : heading(0.0)
  , roll(0.0)
  , pitch(0.0)
  {
  }

  Orientation_(const ContainerAllocator& _alloc)
  : heading(0.0)
  , roll(0.0)
  , pitch(0.0)
  {
  }

  typedef float _heading_type;
  float heading;

  typedef float _roll_type;
  float roll;

  typedef float _pitch_type;
  float pitch;


  typedef boost::shared_ptr< ::imu_msg::Orientation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::imu_msg::Orientation_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Orientation
typedef  ::imu_msg::Orientation_<std::allocator<void> > Orientation;

typedef boost::shared_ptr< ::imu_msg::Orientation> OrientationPtr;
typedef boost::shared_ptr< ::imu_msg::Orientation const> OrientationConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::imu_msg::Orientation_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::imu_msg::Orientation_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace imu_msg

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::imu_msg::Orientation_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::imu_msg::Orientation_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::imu_msg::Orientation_<ContainerAllocator> > {
  static const char* value() 
  {
    return "449c598930d6fa1db490084413a52c92";
  }

  static const char* value(const  ::imu_msg::Orientation_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x449c598930d6fa1dULL;
  static const uint64_t static_value2 = 0xb490084413a52c92ULL;
};

template<class ContainerAllocator>
struct DataType< ::imu_msg::Orientation_<ContainerAllocator> > {
  static const char* value() 
  {
    return "imu_msg/Orientation";
  }

  static const char* value(const  ::imu_msg::Orientation_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::imu_msg::Orientation_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 heading\n\
float32 roll\n\
float32 pitch\n\
\n\
";
  }

  static const char* value(const  ::imu_msg::Orientation_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::imu_msg::Orientation_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::imu_msg::Orientation_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.heading);
    stream.next(m.roll);
    stream.next(m.pitch);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Orientation_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::imu_msg::Orientation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::imu_msg::Orientation_<ContainerAllocator> & v) 
  {
    s << indent << "heading: ";
    Printer<float>::stream(s, indent + "  ", v.heading);
    s << indent << "roll: ";
    Printer<float>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
  }
};


} // namespace message_operations
} // namespace ros

#endif // IMU_MSG_MESSAGE_ORIENTATION_H

