/* Auto-generated by genmsg_cpp for file /home/amos/amos/hardware/base_msgs/msg/powerInfo.msg */
#ifndef BASE_MSGS_MESSAGE_POWERINFO_H
#define BASE_MSGS_MESSAGE_POWERINFO_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace base_msgs
{
template <class ContainerAllocator>
struct powerInfo_ {
  typedef powerInfo_<ContainerAllocator> Type;

  powerInfo_()
  : voltageLeft(0.0)
  , voltageRight(0.0)
  , currentLeft(0.0)
  , currentRight(0.0)
  {
  }

  powerInfo_(const ContainerAllocator& _alloc)
  : voltageLeft(0.0)
  , voltageRight(0.0)
  , currentLeft(0.0)
  , currentRight(0.0)
  {
  }

  typedef float _voltageLeft_type;
  float voltageLeft;

  typedef float _voltageRight_type;
  float voltageRight;

  typedef float _currentLeft_type;
  float currentLeft;

  typedef float _currentRight_type;
  float currentRight;


  typedef boost::shared_ptr< ::base_msgs::powerInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::base_msgs::powerInfo_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct powerInfo
typedef  ::base_msgs::powerInfo_<std::allocator<void> > powerInfo;

typedef boost::shared_ptr< ::base_msgs::powerInfo> powerInfoPtr;
typedef boost::shared_ptr< ::base_msgs::powerInfo const> powerInfoConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::base_msgs::powerInfo_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::base_msgs::powerInfo_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace base_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::base_msgs::powerInfo_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::base_msgs::powerInfo_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::base_msgs::powerInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b4c72da9ae23f39c0571bf2017b17268";
  }

  static const char* value(const  ::base_msgs::powerInfo_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb4c72da9ae23f39cULL;
  static const uint64_t static_value2 = 0x0571bf2017b17268ULL;
};

template<class ContainerAllocator>
struct DataType< ::base_msgs::powerInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "base_msgs/powerInfo";
  }

  static const char* value(const  ::base_msgs::powerInfo_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::base_msgs::powerInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 voltageLeft\n\
float32 voltageRight\n\
float32 currentLeft\n\
float32 currentRight\n\
\n\
\n\
";
  }

  static const char* value(const  ::base_msgs::powerInfo_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::base_msgs::powerInfo_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::base_msgs::powerInfo_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.voltageLeft);
    stream.next(m.voltageRight);
    stream.next(m.currentLeft);
    stream.next(m.currentRight);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct powerInfo_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::base_msgs::powerInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::base_msgs::powerInfo_<ContainerAllocator> & v) 
  {
    s << indent << "voltageLeft: ";
    Printer<float>::stream(s, indent + "  ", v.voltageLeft);
    s << indent << "voltageRight: ";
    Printer<float>::stream(s, indent + "  ", v.voltageRight);
    s << indent << "currentLeft: ";
    Printer<float>::stream(s, indent + "  ", v.currentLeft);
    s << indent << "currentRight: ";
    Printer<float>::stream(s, indent + "  ", v.currentRight);
  }
};


} // namespace message_operations
} // namespace ros

#endif // BASE_MSGS_MESSAGE_POWERINFO_H

