/* Auto-generated by genmsg_cpp for file /home/amos/amos/hardware/base_msgs/msg/setAccel.msg */
#ifndef BASE_MSGS_MESSAGE_SETACCEL_H
#define BASE_MSGS_MESSAGE_SETACCEL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace base_msgs
{
template <class ContainerAllocator>
struct setAccel_ {
  typedef setAccel_<ContainerAllocator> Type;

  setAccel_()
  : left(0.0)
  , right(0.0)
  {
  }

  setAccel_(const ContainerAllocator& _alloc)
  : left(0.0)
  , right(0.0)
  {
  }

  typedef float _left_type;
  float left;

  typedef float _right_type;
  float right;


  typedef boost::shared_ptr< ::base_msgs::setAccel_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::base_msgs::setAccel_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct setAccel
typedef  ::base_msgs::setAccel_<std::allocator<void> > setAccel;

typedef boost::shared_ptr< ::base_msgs::setAccel> setAccelPtr;
typedef boost::shared_ptr< ::base_msgs::setAccel const> setAccelConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::base_msgs::setAccel_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::base_msgs::setAccel_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace base_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::base_msgs::setAccel_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::base_msgs::setAccel_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::base_msgs::setAccel_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3a927990ab5d5c3d628e2d52b8533e52";
  }

  static const char* value(const  ::base_msgs::setAccel_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x3a927990ab5d5c3dULL;
  static const uint64_t static_value2 = 0x628e2d52b8533e52ULL;
};

template<class ContainerAllocator>
struct DataType< ::base_msgs::setAccel_<ContainerAllocator> > {
  static const char* value() 
  {
    return "base_msgs/setAccel";
  }

  static const char* value(const  ::base_msgs::setAccel_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::base_msgs::setAccel_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 left\n\
float32 right\n\
\n\
";
  }

  static const char* value(const  ::base_msgs::setAccel_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::base_msgs::setAccel_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::base_msgs::setAccel_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.left);
    stream.next(m.right);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct setAccel_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::base_msgs::setAccel_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::base_msgs::setAccel_<ContainerAllocator> & v) 
  {
    s << indent << "left: ";
    Printer<float>::stream(s, indent + "  ", v.left);
    s << indent << "right: ";
    Printer<float>::stream(s, indent + "  ", v.right);
  }
};


} // namespace message_operations
} // namespace ros

#endif // BASE_MSGS_MESSAGE_SETACCEL_H

